package com.example.custommainweb;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private ImcAtBizMsgRep imcAtBizMsgRep;

    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setMsg(name);
        n.setPhoneNumber(email);
        userRepository.save(n);
        return "Saved";
    }

    @PostMapping(path = "/aMsg") // Map ONLY POST Requests
    public @ResponseBody
    String addNewAtBizMsg(
            @RequestParam String status,
            @RequestParam String priority,
            @RequestParam String reservedDate,
            @RequestParam String senderKey,
            @RequestParam String phoneNumber,
            @RequestParam String templateCode,
            @RequestParam String msg) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        ImcAtBizMsg n = new ImcAtBizMsg();
        n.setStatus(status);
        n.setPriority(priority);
        n.setReservedDate(reservedDate);
        n.setSenderKey(senderKey);
        n.setPhoneNumber(phoneNumber);
        n.setTemplateCode(templateCode);
        n.setMsg(msg);

        imcAtBizMsgRep.save(n);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}
